import argparse
import numpy as np
from Bio import SeqIO
import tensorflow as tf
from tensorflow.keras import layers, models

NUCLEOTIDE_MAP = {'A':0, 'C':1, 'G':2, 'T':3, 'N':4}
VOCAB_SIZE = 5

class SequencePreprocessor:
    def __init__(self, window_size=200):
        self.window_size = window_size

    def one_hot_encode(self, seq):
        arr = np.zeros((self.window_size, VOCAB_SIZE), dtype=np.float32)
        for i, nt in enumerate(seq[:self.window_size]):
            idx = NUCLEOTIDE_MAP.get(nt, NUCLEOTIDE_MAP['N'])
            arr[i, idx] = 1.0
        return arr

    def preprocess_fasta(self, fasta_path, output_path):
        windows = []
        for record in SeqIO.parse(fasta_path, "fasta"):
            seq = str(record.seq)
            for i in range(0, len(seq) - self.window_size + 1, self.window_size):
                win = seq[i:i+self.window_size]
                windows.append(self.one_hot_encode(win))
        np.save(output_path, np.stack(windows))
        print(f"Saved {len(windows)} windows to {output_path}")

class TransformerModel:
    def __init__(self, input_shape, num_heads=4, ff_dim=128, num_layers=2):
        inputs = layers.Input(shape=input_shape)
        x = layers.Dense(ff_dim)(inputs)
        for _ in range(num_layers):
            attn = layers.MultiHeadAttention(num_heads=num_heads, key_dim=ff_dim)(x, x)
            x = layers.Add()([x, attn])
            x = layers.LayerNormalization()(x)
            ff = layers.Conv1D(ff_dim, 1, activation='relu')(x)
            x = layers.Add()([x, ff])
            x = layers.LayerNormalization()(x)
        x = layers.GlobalAveragePooling1D()(x)
        outputs = layers.Dense(1, activation='sigmoid')(x)
        self.model = models.Model(inputs, outputs)

    def compile(self):
        self.model.compile(
            optimizer='adam',
            loss='binary_crossentropy',
            metrics=['accuracy']
        )
        return self.model


def main():
    parser = argparse.ArgumentParser()
    sub = parser.add_subparsers(dest='command')

    prep = sub.add_parser('preprocess')
    prep.add_argument('--input', required=True)
    prep.add_argument('--output', required=True)
    prep.add_argument('--window-size', type=int, default=200)

    args = parser.parse_args()
    if args.command == 'preprocess':
        pre = SequencePreprocessor(window_size=args.window_size)
        pre.preprocess_fasta(args.input, args.output)

if __name__ == '__main__':
    main()
